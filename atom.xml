<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[活動日記]]></title>
  <link href="http://yusakusakamoto.github.io/atom.xml" rel="self"/>
  <link href="http://yusakusakamoto.github.io/"/>
  <updated>2015-10-27T08:01:19+09:00</updated>
  <id>http://yusakusakamoto.github.io/</id>
  <author>
    <name><![CDATA[Yusaku Sakamoto]]></name>
    <email><![CDATA[yskibouyskibou@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS7のインストール]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/27/centos7-install/"/>
    <updated>2015-10-27T05:49:08+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/27/centos7-install</id>
    <content type="html"><![CDATA[<p><img src="http://mireiasangalo.com/wp-content/uploads/2013/09/centos-splash.png" alt="logo" />
<img src="http://yusakusakamoto.github.io/images/centos7.png" alt="centos" /></p>

<h1>基本の知識</h1>

<p>CentOSは、Red Hat系linuxであり、RHELの完全互換を目指した無料のlinux distributionである。</p>

<p>ROSでdistroという言葉が出てきていましたが、distro = distributionだそうです。もちろん、debianではないので<strong>aptは使えません。</strong>では、その代わりに何があるのかというと、yum(Yellowdog Updater Modified)というメタパッケージ管理システムが用意されています。</p>

<p>しかし、デフォルトの状態であれば、入れることができるアプリケーションは非常に限定的であり、レポジトリを新たに追加するという人が多いようです。</p>

<p>管理ファイルは、/etc/yum.repos.dのレポジトリ。<br/>
ここに.repoファイルを作成すればいいようです。</p>

<h2>yumのレポジトリを確認する</h2>

<p><code>
yum repolist
</code></p>

<p>私の環境(入れたばかり)の状況では、以下のものが出ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>読み込んだプラグイン:fastestmirror, langpacks
</span><span class='line'>Determining fastest mirrors
</span><span class='line'> * base: ftp.iij.ad.jp
</span><span class='line'> * extras: ftp.iij.ad.jp
</span><span class='line'> * updates: ftp.iij.ad.jp
</span><span class='line'>リポジトリー ID                  リポジトリー名                      状態
</span><span class='line'>base/7/x86_64                    CentOS-7 - Base                     8,652
</span><span class='line'>extras/7/x86_64                  CentOS-7 - Extras                     236
</span><span class='line'>updates/7/x86_64                 CentOS-7 - Updates                  1,531
</span><span class='line'>repolist: 10,419</span></code></pre></td></tr></table></div></figure>


<h2>レポジトリの説明</h2>

<p>私はなんの気無しにiijというミラーサイトのOSをダウンロードして入れてみましたが、iijとはおそらく(internet initiative japan)の会社のことです。日本の会社であるので、もうあらかたの日本語環境は導入済みなようです。ここでは、予めOSのイメージを作成した際に、これは絶対に必要だと判断されたもののパッケージがbase,extras,updatesというレポジトリとして存在しています。</p>

<p>では、yumにレポジトリの追加をしていきます。とりあえず、以下の３種類のものをとりあえず入れたら?みたいな感じで様々なサイトに記載していましたので、どのようなレポジトリなのかを調べてみましょう。</p>

<ul>
<li><a href="https://wiki.centos.org/AdditionalResources/Repositories/RPMForge">repoforge</a></li>
<li>epel</li>
<li>remi</li>
<li>RPMFusion</li>
<li>IUS</li>
<li>Utter Ramblings</li>
</ul>


<p><strong>注意</strong><br/>
今は、RPMForgeではなく、<strong>Repoforge</strong>という名前になっているようです<br/>
しかし、rpmファイルの名前は依然としてrpmforgeになっていたりして。</p>

<p>調べた結果、個人的な感想を述べるとすれば、みなさんパッケージの種類が増えるだの、バージョンが増えるなど、様々言いたいことを申しているようですが、よくわからないので公式ページを見に行きました。</p>

<p>RPMforge is a collaboration of Dag and other packagers. They provide over 5000 packages for CentOS, including wine, vlc, mplayer, xmms-mp3, and other popular media tools. It is not part of Red Hat or CentOS but is designed to work with those distributions. See also Using RPMforge and Repoforge.</p>

<p>そんだけかい！</p>

<p>その他のレポジトリもそんなものなんでしょう。とりあえずいっぱい追加しても悪いことはない、ということですね。</p>

<h2>keepassxのインストール</h2>

<p>ubuntuを使っている間は、keepass2をインストールするのが当たり前でしたが、今回はcentosで、しかも不慣れなyumなので、少しの違和感がありました。次のコマンドを実行<br/>
<code>
sudo yum install keepassx
</code>
初めて聞きますが、このコマンドで入りました。</p>

<h1>参考文献</h1>

<ol>
<li><a href="http://www.unix-power.net/linux/yum.html">UnixPower on Networking</a></li>
<li><a href="http://oki2a24.com/2012/03/13/what-is-rpmforge-remi-epel/">repositoryの解説・入れ方</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport08]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/24/passport08/"/>
    <updated>2015-10-24T08:59:09+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/24/passport08</id>
    <content type="html"><![CDATA[<h4>キャッシュメモリ</h4>

<p>主記憶とのアクセス時間を見かけ上短縮することによって、CPUの処理効率を高める。</p>

<h4>フラッシュメモリ</h4>

<p>フラッシュメモリは、不揮発性(電源を切っても記録が消えない)のメモリで、これをカードがあにしたものがメモリカードと呼ばれる。</p>

<h4>DRAM</h4>

<p>DRAM(Dynamic Random Access Memory)は、単純で安価であるので、多用される。電荷は時間と共に減少するので、一定時間ごとに記憶保持のための再書込(リフレッシュ)を行う必要がある。電源が切れると、記録が消えてしまうので、揮発性である。</p>

<h4>RAID</h4>

<p>信頼性、予算、速度のどれに重きを置くのかによってレベルが用意されている。</p>

<table>
<thead>
<tr>
<th>RAIDレベル</th>
<th>内容          </th>
</tr>
</thead>
<tbody>
<tr>
<td>RAID0    </td>
<td> ストライピング  </td>
</tr>
<tr>
<td>RAID1    </td>
<td> ミラーリング   </td>
</tr>
<tr>
<td>RAID2    </td>
<td> ハミング符号による耐障害性保証</td>
</tr>
<tr>
<td>RADI3    </td>
<td> パリティによる障害性保証</td>
</tr>
<tr>
<td>RAID4    </td>
<td> パリティによるブロック単位記録</td>
</tr>
<tr>
<td>RAID5    </td>
<td> パリティによるブロック単位分散記録</td>
</tr>
<tr>
<td>RAID6    </td>
<td> パリティによるブロック単位分散記録の方法にもう一手間</td>
</tr>
</tbody>
</table>


<h4>シリアルATA(SATA)</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport04]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/23/passport04/"/>
    <updated>2015-10-23T10:50:12+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/23/passport04</id>
    <content type="html"><![CDATA[<h4>ウォーターフローモデル</h4>

<p>手順
1. 基本計画(実現目標)
2. 外部設計(具体的な機能として定義)
3. 内部設計(機能を実現する処理ごとにプログラムを分割する)
4. プログラム設計(プログラムの構造を設計)
5. プログラム(ロジック)
6. テスト</p>

<h4>ファンクションポイント法</h4>

<p>開発工数を見積もる方法。機能数や複雑さによって重み付けした点数をつけることから。</p>

<h4>構造化プログラミング</h4>

<p>制約はあるが、保守しやすいプログラム。制御構造として、順次、選択、繰り返しの3種類が挙げられる。</p>

<h3>共通フレーム2007</h3>

<p>共通フレーム(SLCP-JCF)とは、SLCPの国際標準準拠であるISO/IEC 12207を日本の商習慣に合わせて拡張したものである。</p>

<ol>
<li>要件定義プロセスのアクティビティは利害関係者要件の定義</li>
<li>企画プロセスのアクティビティはシステム化計画の立案</li>
<li>開発プロセスのアクティビティはシステム方式設定とソフトウェア要件定義</li>
</ol>


<h4>企画プロセスの目的</h4>

<p>経営事業の目的、目標を達成するために必要なシステム化の方針及びシステムを実現するための実施計画を得ること</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspi_pwm]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/23/raspi-pwm/"/>
    <updated>2015-10-23T10:38:10+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/23/raspi-pwm</id>
    <content type="html"><![CDATA[<h1>raspberry_Piでpwm信号を扱う</h1>

<p>以下の動画の様なことをしました。
<video width='640' height='320' preload='metadata' controls ><source src='http://yusakusakamoto.github.io/images/raspi2.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>レポジトリraspiにプログラムを追加。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux使ってみました]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/23/tmux-momo/"/>
    <updated>2015-10-23T07:05:20+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/23/tmux-momo</id>
    <content type="html"><![CDATA[<h1>install</h1>

<p>以下の環境で動作確認済みです。<br/>
- raspberry Pi<br/>
- ubuntu15.04<br/>
- ubuntu14.04LTS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get -y update
</span><span class='line'>sudo apt-get -y upgrade
</span><span class='line'>sudo apt-get -y install tmux</span></code></pre></td></tr></table></div></figure>


<h1>memo</h1>

<table>
<thead>
<tr>
<th> 機能        </th>
<th> キー      </th>
</tr>
</thead>
<tbody>
<tr>
<td> ウィンドウ移動 </td>
<td> ctrl-b o </td>
</tr>
<tr>
<td> 水平分割    </td>
<td> ctrl-b &ldquo; </td>
</tr>
<tr>
<td> 垂直分割    </td>
<td> ctrl-b % </td>
</tr>
<tr>
<td> 分割解除    </td>
<td> ctrl-b x </td>
</tr>
</tbody>
</table>


<p>元ネタ
<a href="http://kanjuku-tomato.blogspot.jp/2014/02/tmux.html">完熟トマト</a></p>

<h1>感想</h1>

<p>ctrl-bが辛い。その他良好。</p>

<h1>遊び</h1>

<p>画面分割、という機能は割となんにでも装備されているものです。<br/>
- terminator<br/>
- tmux<br/>
- emacs<br/>
- vim</p>

<p>での端末分割・作成ができるようになりましたので、ここで一度遊んでみました。
<img src="http://yusakusakamoto.github.io/images/tmux.png" alt="terminal" /></p>

<ul>
<li>左上がterminator</li>
<li>左下がVimShell</li>
<li>右上がtmux</li>
<li>右下がemacsのansi-term</li>
</ul>


<p>です。遊んでみた結果、端末で端末の端末が開けるという事を実証できたことに満足。
なんにせよ、これでraspberry pi での操作が簡単になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[半波整流]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/20/half-wave-rectifier-circuit/"/>
    <updated>2015-10-20T15:49:23+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/20/half-wave-rectifier-circuit</id>
    <content type="html"><![CDATA[<p><img src="http://yusakusakamoto.github.io/images/1445330116197.jpg" alt="osiro" /></p>

<h1>用語整理</h1>

<h2>1. 半波整流回路(以下、参考文献1より)</h2>

<p>読み方：はんぱせいりゅうかいろ
【英】Half-Wave Rectifier Circuit</p>

<p>半波整流回路とは、電流をある正・負どちらかの方向にのみ流れるようにする回路（整流回路）のうち、交流電流において正・負の両方の方向に流れている電流のどちらか一方だけを流すことによって整流を行う回路のことである。</p>

<p>半波整流回路は、主にダイオードなどを利用して実現される。ダイオードは整流素子と呼ばれる素子の一つで、電流をアノードからカソードへの方向にしか流さない性質を持っている。そのため、回路中にダイオードを一つ挟むことによって、電流を常に単一の方向にしか流れないようにすることができる。</p>

<p>半波整流回路は、整流素子一個だけで手軽に整流回路が構成できるという利点がある。その反面、電流サイクルの半分を遮断して整流している仕組み上、変換効率が悪いなどの困難がある。このため、半波整流回路はもっぱら簡易的な、負荷や容量の小さい整流器に使用されている。</p>

<p>単純に半波整流回路で整流しただけの電流は、交流電流の波形を残した脈流と呼ばれる状態となっている。このとき、平滑回路やチョークコイルなどを使用することにより、脈流をより直流電流に近づけることができる。</p>

<p>なお、半波整流回路に対して、交流の正・負の両方の電流を同一方向へ流れるようにする（整流する）ことによって電流を変換する回路が、全波整流回路と呼ばれている。全波整流回路の構造は、電気製品のACアダプタなどで一般的に利用されている。</p>

<h4>つまり？</h4>

<p>ダイオードを用いて、マイナス電圧をクランプ(clamp:制限)した回路のこと。例えば、電池を逆につないでも壊れない、みたいな使い方ができる。実際、一度逆電圧をかけるだけで壊れてしまう電子部品なんてたくさんあります。</p>

<h2>2. ダイオード</h2>

<p>ダイオードは、n型半導体とp型半導体でできている。ダイオードには、逆電流を流さないという特性を持っているが、一定以上の逆電圧をかければ電流は流れ始める。</p>

<h3>n型半導体</h3>

<p>wikiより<br/>
n型半導体（エヌがたはんどうたい）とは、電荷を運ぶキャリアとして自由電子が使われる半導体である。<strong>負の電荷を持つ自由電子がキャリアとして移動</strong>することで電流が生じる。つまり、多数キャリアが電子となる半導体である。 例えば、シリコンなど4価元素の真性半導体に、微量の5価元素(リン、ヒ素など)を不純物として添加することでつくられる。不純物半導体に含まれる。</p>

<ul>
<li>N型半導体をつくる為の不純物をドナーといい、この不純物より形成された準位をドナー準位と呼ぶ。</li>
<li>負の電荷を持つ自由電子が多数キャリアであることから、英語の頭文字をとってn型半導体と呼ばれる。</li>
<li>工学ではn形半導体と表記される（日本工業規格(JIS)など）。</li>
</ul>


<h3>p型半導体</h3>

<p>wikiより<br/>
p型半導体（ピーがたはんどうたい）とは、電荷を運ぶキャリアとして正孔(ホール)が使われる半導体である。<strong>正の電荷を持つ正孔が移動する</strong>ことで電流が生じる。つまり、正孔が多数キャリアとなる半導体である。 例えばシリコンなど4価元素の真性半導体に、微量の3価元素(ホウ素、アルミニウムなど)を添加することでつくられる。不純物半導体に含まれる。</p>

<ul>
<li>p型半導体をつくる為の添加物をアクセプタといい、この添加物によって形成された準位をアクセプタ準位と呼ぶ。</li>
<li>正（英: positive）の電荷を持つ正孔が多数キャリアであることから、英語の頭文字をとってp型半導体と呼ばれる。</li>
<li>工学ではp形半導体と表記される（日本工業規格(JIS)など）。</li>
</ul>


<h2>3. マイナス電圧</h2>

<p>電圧とは、相対的なものであるので、必ずしもearthが0Vということではない。実際、交流は正の電圧と府の電圧が交互(alternative)に入れ替わるので、ACと呼称される。つまり、どこを基準(GND)とするかで、電圧というものは変わってくる。だけど殆どは地球(earth,ground)を基準電圧とすることが多い。</p>

<p>こうして考えると、電気製品は静電気とかめっちゃ怖かったんだろうな。今はそんなに聞かないけど。</p>

<h2>4. 発信器</h2>

<p>発信器は、矩形波や正弦波のような電圧の波を発生させるのに使用されます。</p>

<p>動作原理は、LC共振回路(コイルとコンデンサ)、またはRC回路(抵抗とコンデンサ)の回路を用いて発生させるようです。人間の叡智ですね。</p>

<p>擬似的な交流電流を作って、電気回路の実験をするときは、低周波発信器を使ったことがあるかもしれませんね。</p>

<h2>5. オシロスコープ</h2>

<p>さて、ここは少し<strong>重要</strong>なことですが、オシロスコープの内部構成によって、以下の動作がされます。</p>

<ul>
<li><p>DCで接続した場合
低周波の交流電圧、または直流の電圧を測定するのに用いられます。つまり、直流成分も交流成分も表示します。基本的にはこのDCモードで測定をおこないます。もしも発振周波数が高すぎると、過渡減少が発生して正常な測定ができなくなります。</p></li>
<li><p>ACで接続した場合
入力に直列にDCカット用のブロッキングコンデンサが入れられるようです。つまり、DC成分が観測されませんが、高周波の交流回路でも安定して計測できます。</p></li>
</ul>


<h1>考察的な何か</h1>

<h2>ダイオードで交流電圧を半波整流にしても負電圧を通す理由</h2>

<p>詳しくは参考文献4を参照して下さい。<br/>
つまり、少数キャリア蓄積効果というものが関係しているらしいです。</p>

<p>順方向電圧をいきなり0Vにすれば、理想的なダイオードでは、確かに０Vになります。しかし、現実では一旦逆方向電流が流れ、次第にだらだらと0Vに近似していくような経過をたどります。したがって、今考えている状況では逆方向電圧が僅かながらにかかっているわけですから、写真のような挙動をします。</p>

<h2>オシロスコープの負電圧を通した部分の波形が右側にずれてしまっている件</h2>

<p>これは前述した少数キャリア蓄積効果が少しかぶっていますが、回路的に逆電圧をかけて、おそらく半導体に電荷が微量溜まっていて、コンデンサ的な働きをしているのではないか、と考えられます。したがって負電荷から正電荷に変わる際には値が急激に上がっており、逆に正電荷から負電荷になる際には電荷が流れなくなった結果、傾きが緩やかになっていると考えます。</p>

<h1>参考文献</h1>

<ol>
<li><a href="http://eleking.net/study/s-accircuit/sac-halfwave.html">IT用語辞典バイナリ</a></li>
<li><a href="http://eleking.net/study/s-accircuit/sac-halfwave.html">半波整流波形の実効値、平均値、最大値、波形率、波高率の計算方法</a></li>
<li><a href="http://www.marutsu.co.jp/contents/shop/marutsu/mame/146.html">初歩の測定器活用、入門シリーズ第4回目 オーディオ発振器</a></li>
<li><a href="http://www.geocities.co.jp/HeartLand-Tachibana/9059/otasuke/diode.htm">ダイオードの特性</a></li>
<li><a href="http://www.kawakawa.net/note/srd/srd.html">ダイオードの逆回復時間とステップリカバリダイオード</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport05]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/20/passport05/"/>
    <updated>2015-10-20T15:29:19+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/20/passport05</id>
    <content type="html"><![CDATA[<h4>PERT(Program Evaluation and Review Technique)</h4>

<p>partではありません。pertです。
IT用語辞典から</p>

<p>PERTとは、プロジェクトマネジメントの手法の一つで、各工程の依存関係を図示して所要期間を見積もったり、重要な工程を見極めたりする手法。1950年代に米海軍で弾道ミサイル開発プロジェクトのために考案された手法である。</p>

<p>PERTでは各工程を依存関係（前の工程が終わらないと、次の工程が始められない）に従って矢印で繋いでいき、それぞれの工程には所要時間を記入していく。出来上がったネットワーク図（アローダイアグラム、PERT図とも呼ばれる）にはプロジェクト開始から終了まで通常いくつかの経路が現れる。経路をたどって各工程の所要時間を足し合わせていくとその経路の所要時間が求められ、その中で最大のものがプロジェクト全体の工期の見積りとなる。</p>

<h4>man-month</h4>

<p>単位:人月について
IT用語辞典から</p>

<p>人月とは「人数×月」を意味し、プロジェクトに投入する人員と、月で表した一人あたりのプロジェクト従事期間の積を表す。1人で1ヶ月かかる仕事の量が1人月である。10人で6ヶ月かかれば60人月、100人で半月かかれば50人月となる。</p>

<h4>開発規模</h4>

<p>定義<br/>
<code>
開発規模 = 開発工数 ✕　生産量 / 単位時間
</code></p>

<p>ここで、<br/>
<code>
生産性 = 　生産量 / 単位時間
</code></p>

<h4>DOA</h4>

<p>データ中心アプローチ(Data Oriented Approach:DOA)
手法<br/>
1. ERモデルをモデル化<br/>
2. 正規化<br/>
3. RDB(リレーショナル・データベースを)設計</p>

<p>利点<br/>
データの整合性、一貫性が保たれる</p>

<h4>POA</h4>

<p>プロセス指向アプローチ(Process Oriented Approach:POA)<br/>
手法<br/>
1. 業務の手順・工程を図に書き表す<br/>
2. ソフトウェア・システムの挙動の決定</p>

<p>欠点
データの連続性が失われる。</p>

<h4>WBS</h4>

<p>作業分解図(Work Breakdown Structure:WBS)<br/>
1. 全体を大きな単位に分割<br/>
2. 細分割化(ワークパッケージの作成)</p>

<h4>OBS</h4>

<p>作業構成図(Organization Breakdown Structure:OBS)<br/>
WBSで作成された作業の単位(ワークパッケージ)に責任者と担当者を配置したもの</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspi1]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/19/raspi1/"/>
    <updated>2015-10-19T08:23:13+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/19/raspi1</id>
    <content type="html"><![CDATA[<h1>Wiring Piの導入方法</h1>

<p>raspberry pi 2 model Bにて動作確認済み<br/>
wiringPi installの手順</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://YusakuSakamoto/raspi ~/GPIO
</span><span class='line'>cd ~/GPIO
</span><span class='line'>sh wiringPi.sh</span></code></pre></td></tr></table></div></figure>


<p>wiringPi.shの中身</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git-core
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get upgrade
</span><span class='line'>mkdir -p ${HOME}/lib
</span><span class='line'>git clone git://git.drogon.net/wiringPi ${HOME}/lib/wiringPi
</span><span class='line'>cd ${HOME}/lib/wiringPi
</span><span class='line'>git pull origin master
</span><span class='line'>./build</span></code></pre></td></tr></table></div></figure>


<h1>WiringPiを使用したLチカ</h1>

<p><img src="http://3.bp.blogspot.com/-gmSvHB8OAHo/VRQvYSy5BLI/AAAAAAAABBQ/GHkqcVJEp4Q/s1600/Raspberry%2BPi%2BGPIO%2BPins.png" alt="LED Light" /></p>

<h2>blinkレポジトリのプログラムを実行する</h2>

<p>makeして下さい。デフォルトの状態では、Physical13ピンでの動作をします。</p>

<p><video width='640' height='320' preload='metadata' controls ><source src='http://yusakusakamoto.github.io/images/20151020_091839.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport07]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/19/passport07/"/>
    <updated>2015-10-19T08:21:33+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/19/passport07</id>
    <content type="html"><![CDATA[<h4>排他的論理和(XOR)</h4>

<p>真理値表</p>

<table>
<thead>
<tr>
<th> 命題P   </th>
<th> 命題Q   </th>
<th> P XOR Q </th>
</tr>
</thead>
<tbody>
<tr>
<td>  TRUE  </td>
<td>  TRUE </td>
<td>    FALSE    </td>
</tr>
<tr>
<td>  TRUE  </td>
<td>  FALSE </td>
<td>    TRUE    </td>
</tr>
<tr>
<td>  FALSE  </td>
<td>  TRUE </td>
<td>    TRUE    </td>
</tr>
<tr>
<td>  FALSE  </td>
<td>  FALSE </td>
<td>    FALSE    </td>
</tr>
</tbody>
</table>


<p>どちらか片方のみが真であれば、その排他的論理和も真であるが、両方が真だと偽になる。<br/>
<img src="https://upload.wikimedia.org/wikipedia/ja/6/6b/Venn-Diagram-XOR.png" alt="XOR" /></p>

<h4><a href="http://mathtrain.jp/de">ド・モルガンの法則</a></h4>

<h4>アルゴリズムまとめ</h4>

<ul>
<li>合計(SUM)</li>
<li>探索(SEARCH)</li>
<li>逐次探索</li>
<li>線形探索</li>
<li>二分探索</li>
<li>バイナリサーチ</li>
<li>併合</li>
<li>整列</li>
<li>交換法</li>
<li>バブルソート</li>
<li>選択法</li>
<li>挿入法</li>
<li>クイックソート</li>
<li>ヒープソート</li>
<li>シェルソート</li>
<li>マージソート</li>
<li>ハッシュ法</li>
<li>シノニム</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport09]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/19/passport09/"/>
    <updated>2015-10-19T03:12:09+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/19/passport09</id>
    <content type="html"><![CDATA[<h4>ADSL</h4>

<p>非対称ディジタル加入者線（Asymmetric Digital Subscriber Line）のことで、アナログ電話回線を使って、高速通信を実現した方式。数百kから数重Mビット毎秒程度の速度。アシンメトリック(Asymmetric)とは、非対称のことで、ダウンロードは大容量を非常に高速にできるのに対して、アップロードは少量で遅い通信しかできない。</p>

<h4>Dos攻撃</h4>

<p>Dos攻撃(Denial of Service attack:DoS)は、相手のサービスを妨害することを目的に、意味のない大量のデータを送りつけ、通信不能な状態にする攻撃。Denialとは、否定の意味を持つ。</p>

<h4>DDoS</h4>

<p>ゾンビコンピュータを利用した分散型で行う場合は、DDoS攻撃（ディードス攻撃）と呼ばれる。ゾンビコンピュータとは、ウイルス等によって、遠隔操作で悪用できる状態のコンピュータを指す。</p>

<h4>ジフ(Graphics Interchange Format:GIF）</h4>

<p>線画画像などのデータを圧縮して保存するための静止画のデータ形式。256色を扱い、JPEGと共にインターネットで標準的に使用される。</p>

<h4>ADSL modem(モデム：変調復調装置)</h4>

<p>変調・復調を行うことから<strong>mod</strong>ulator <strong>dem</strong>odulatorの頭文字を取って名付けられた。ADSL modemは、ADSLでアナログ通信を行うための専用のモデム。ノイズに弱いので、電話局から離れすぎると通信速度が遅くなる。</p>

<h4>FTP(File Transfer Protocol)</h4>

<p>ファイル転送プロトコルは、安全を考えた設計ではない。通常はTCP/IPのような通信で使用されていたが、現在はSSH FTP(SFTP)という手法で暗号化されたものを使用することがある。</p>

<h4>DBMS(database management system)</h4>

<p>主な機能<br/>
- データベース言語。例えばSQLなど<br/>
- 論理的データの独立性<br/>
- データ完全性<br/>
- トランザクション処理<br/>
- セキュリティ<br/>
- 障害復旧<br/>
- 最適化<br/>
- 分散データベース</p>

<h4>DMZ</h4>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Demilitarized_Zone_Diagram.png/220px-Demilitarized_Zone_Diagram.png" alt="DMZ" /><br/>
DMZ(非武装地帯)とは、組織の内部ネットワークと危険の多い外部ネットワーク（一般的にインターネット）の間に設置されている隔離されたネットワーク領域（サブネットワーク、Subnetwork）のこと。コンピュータセキュリティの一技法として使われる。</p>

<h4>HTTP</h4>

<p>HTTPとは、Webサーバに格納されたHTMLファイルやその他メディアファイルを転送するプロトコル。</p>

<h4>ISMS</h4>

<p>PDCAのルーチンによってセキュリティを継続的に維持・向上させる仕組み。</p>

<h4>IMAP(Internet Message Access Protocol)</h4>

<p>メールの本体がサーバ上で管理される。そのため、ネット回線が接続状態でない場合にはアクセスできない。</p>

<h4>HTTPS</h4>

<p>HTTPSはHTTPに認証機能と暗号化機能を付け加えたものをいう。</p>

<h4>バックアップ</h4>

<ul>
<li>差分バックアップ
前回バックアップした状態と現在の状態で差分を取り、保存する</li>
<li>増分バックアップ
増分をバックアップしていく</li>
<li>完全バックアップ
初回バックアップ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport03]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/13/passport3/"/>
    <updated>2015-10-13T15:44:01+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/13/passport3</id>
    <content type="html"><![CDATA[<h5>SFA(Sales Force Automation)</h5>

<p>情報通信技術(IT)を利用して、営業に関するタスクを自動化・支援しようという考え方のこと。</p>

<h5>BPO(Business Process Outsourcing)</h5>

<p>企業運営上の業務や、ビジネスプロセスを専門企業に受託することを示す。日本では沖縄や北海道にコールセンターなどの業務を委託する例がある</p>

<h5>BPR(Business Process Re-engineering)</h5>

<p>企業活動や業務の流れを分析し、最適化すること。根本的に設計し直すことで、劇的な効率の上昇を図る。</p>

<h5>BPM(Business Process Management)</h5>

<p>最適な業務へと改善を続けていく取り組み。BPMとの違いは、短期的で大規模な改革ではなく、長期的な進化を図る、ということ。</p>

<h5>グループウェア</h5>

<p>グループウェアの持つ主な機能は、以下の通り<br/>
- 電子メール機能<br/>
- 電子掲示板機能<br/>
- ドキュメント共有機能<br/>
- スケジュール機能<br/>
- ワークフローシステム機能<br/>
- 設備予約機能<br/>
- ファイル共有機能</p>

<p>自分が使っているグループウェア<br/>
slack,trello,googleカレンダー,gmailなど<br/>
結構各々独立しています。</p>

<h5>DFD(データフローダイアグラム)</h5>

<p>業務などをデータの流れに注目して視覚的に表現したもの</p>

<h5>ER図(Entity Relationship Modeling)</h5>

<p>対象とする世界を実体と関連の２つで表現したもの。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim1]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/13/vimguan-lian-1/"/>
    <updated>2015-10-13T08:04:13+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/13/vimguan-lian-1</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/4/4f/Icon-Vim.svg" alt="" /></p>

<h1>vim設定ファイルの.vimrcをemacsで編集するという矛盾</h1>

<p>今までemacsを使っていたのですが、後輩にvimを扱う者が現れまして、なかなかに使いやすそうだなと思ってちょっと挑戦してみました。もともと少し練習したことがありましたので、ちょっとした編集くらいはできていましたが、今回は<strong>設定ファイル</strong>を編集しました。</p>

<h2>.vimについて</h2>

<p>.vimは自分で編集した*.vim等を置いておくディレクトリだそうですが、私はこれに関しては開発者側に回る気はさらさらないので、githubからひたすらcloneしてきたものを保存していくディレクトリになります。</p>

<h2>.vimrcについて</h2>

<p>.vimrcは、事細かな設定をするときに使用します。例えば、色の設定をするときなどは、ここをいじります。実際にいじってみて、難易度はまあ、.emacs.dをいじった人であれば余裕であろうと思います。</p>

<h2>pasteってどうするんだ</h2>

<p>はい、ここでemacsをついつい立ち上げてしまった、という話です。というのも、例えばfirefoxで見つけた文字列をコピーしようとした時に、ペースト[p]ではうまく行かないのです!!なんと言うことなのでしょうか。ああ、emacs使いやすいなぁ&hellip;</p>

<p>調べてみた結果、vim-gtkなりのclipboardが使えるようなパッケージ入りのものをインストールすれば、自然にクリップボードからのコピーにも対応できるようになるよ、という事らしいです。よって、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install vim-gtk</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>vimshellを入れてみた、という話</h2>

<p>neobundleとかいう管理方法をインストールしてみた結果、結構使いやすかったと言いますか、vim側が勝手に全部やってくれます。素晴らしいです。vimshellだけは少しコンパイルして動作環境に適合させないといけないみたいですが、それ以外は全部自動です。</p>

<p>.vimrcの設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/YusakuSakamoto/dotfiles ~/dotfiles
</span><span class='line'>sh ~/dotfiles/link.sh</span></code></pre></td></tr></table></div></figure>


<p>neobundleの設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir .vim
</span><span class='line'>mkdir -p ~.vim/bundle
</span><span class='line'>git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim</span></code></pre></td></tr></table></div></figure>


<p>vimを立ち上げると、環境を自動的に入れてくれます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transistor]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/10/transistor/"/>
    <updated>2015-10-10T00:00:26+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/10/transistor</id>
    <content type="html"><![CDATA[<h1>トランジスタの役割</h1>

<p>トランジスタは、電圧・電流を増幅させる働きを持ちます。携帯電話は、空気中を伝わってくる電波(微弱な電気信号)を増幅して、通信が可能な信号にしているようです。<br/>
<img src="http://akizukidenshi.com/img/goods/C/I-08423.jpg" alt="Nch MOSFET EKI04047" /></p>

<p>トランジスタの種類には、以下のものがある<br/>
1. バイポーラ・トランジスタ<br/>
2. Field Effect Transistor</p>

<h2>バイポーラ・トランジスタ</h2>

<p>バイポーラトランジスタには、以下のものがある<br/>
1. NPN型トランジスタ<br/>
2. PNP型トランジスタ<br/>
バイポーラトランジスタの場合、端子はコレクタ・ベース・エミッタの3種類が存在する。</p>

<h2>バイポーラトランジスタは電流制御に用いられる。</h2>

<p>バイポーラトランジスタの場合、コレクタ・ベース・エミッタ間は電気的につながっている。</p>

<h2>FET(Field Effect Transistor)</h2>

<p>Field Effect Transistor(電界効果トランジスタ)には、次の種類がある。<br/>
1. Nチャネル<br/>
2. Pチャネル<br/>
FETの場合、ソース、ドレイン、ゲートの3種類が存在する。</p>

<h2>MOSFETは電圧の制御で用いられる。</h2>

<p>MOSとは、金属酸化膜型のこと。
MOSFETの場合、ゲート端子が浮いていることになる。</p>

<h2>記号の意味</h2>

<ol>
<li>Vdss(ドレイン・ソース間電圧[Drain-source voltage])-最大何ボルトまで接続できるか</li>
<li>ld(ドレイン電流[Gate threshold voltage])-最大何アンペアの電流を流せるか</li>
<li>Vth(ゲートしきい値電圧[Gate threshold voltage])-負荷をON/OFFさせるときのゲート電圧の境</li>
<li>Rds(ドレイン・ソース間オン抵抗値[Drain.source ON resistance])オン抵抗値</li>
</ol>


<h2>プルアップ抵抗／プルダウン抵抗</h2>

<p>プルアップ・プルダウン抵抗を使用する目的は、信号を確実に伝えるためにあります。参考資料の3に良い解説があります。</p>

<h1>参考文献</h1>

<ol>
<li><a href="http://www.geocities.jp/zattouka/GarageHouse/micon/circuit/FET.htm">ＦＥＴをマイコン出力のスイッチとして使う方法</a></li>
<li><a href="http://miqn.net/periph/63.html">マイコン徹底入門</a></li>
<li><a href="http://www.geocities.jp/zattouka/GarageHouse/micon/circuit/pullup.htm">プルアップ抵抗／プルダウン抵抗について</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu_setup]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/09/ubuntu-setup/"/>
    <updated>2015-10-09T18:46:34+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/09/ubuntu-setup</id>
    <content type="html"><![CDATA[<h1>ubuntu setup</h1>

<p>最初にubuntuにインストールするシェルスクリプトです。
任意の場所にinstall.shの名前で保存します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>supo sh install.sh</span></code></pre></td></tr></table></div></figure>


<p>でインストールを始めてください</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>sudo apt-get -y update
</span><span class='line'>sudo apt-get -y upgrade
</span><span class='line'>sudo apt-get -y install emacs vim git gitk gcc g++ gfortran gnuplot terminator build-essential libgtk2.0-dev libjpeg-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen3-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev default-jdk ant libvtk5-qt4-dev ibus-mozc arduino keepass2 nautilus-dropbox texlive libopencv-dev python-opencv cmake gparted inkscape mercurial  automake libtool freeglut3-dev xdotool unetbootin texlive-lang-cjk xdotool</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新しい有志のためのガイダンス2]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/09/resume2/"/>
    <updated>2015-10-09T13:58:08+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/09/resume2</id>
    <content type="html"><![CDATA[<h1>挨拶と目次</h1>

<p><a href="http://yusakusakamoto.github.io/blog/2015/10/08/resume/">「新しい有志のためのガイダンス」</a>の復習<br/>
1. keepass2の紹介<br/>
2. dropboxの紹介<br/>
3. githubの登録・導入<br/>
4. gitの解説<br/>
5. haroopadの導入</p>

<p>反省点<br/>
1. 思うほど進行が早くなかった。<br/>
2. 思うほどコンピュータに慣れていなかった。</p>

<p>改善点<br/>
1. Ubuntuの魅力を説明する<br/>
2. USB Bootから、HDDへの移行をすすめる<br/>
3. ROSをどう位置づけるかついての話をCIR-KIT内で議論する<br/>
4. sudo apt-get update &amp;&amp; sudo apt-get upgrade　をするようにすすめる<br/>
5. 皆忙しい中ではあったが、もっと早くガイダンスを開くべきだった</p>

<p>善処します</p>

<p>今日の内容は前回に引き続き、<br/>
今日の内容<br/>
1. <strong>C++の話</strong><br/>
2. <strong>Arduinoの話</strong><br/>
3. <strong>Joystickの話</strong><br/>
4. 前回の6.今の1号機を動かすには
の内容を話します。
よろしくお願いします。</p>

<h1>C++の紹介</h1>

<p><a href="http://www7b.biglobe.ne.jp/~robe/cpphtml/">ロベールのC++</a>のレビューをしますと、これが大変良い良書でして、私が1年生の春休みに購入し、学習を始めた本でした。ぜひご購入くださいませ。</p>

<h1>ArduinoとPCとの通信プログラム</h1>

<p><a href="https://github.com/YusakuSakamoto/arduino">私のgithubからcloneしてください</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/YusakuSakamoto/arduino</span></code></pre></td></tr></table></div></figure>


<p>このプログラムは、以下のものが含まれています。<br/>
- JoyStickとの通信<br/>
- Arduinoとの通信<br/>
- GPSとの通信<br/>
- iMCs01との通信<br/>
- LRF(UTM-30LXとの通信)</p>

<p>必要なヘッダー等、不要な部分はコメントアウトする必要があります。<br/>
ご注意ください。</p>

<h1>グループワーク</h1>

<p>リーダーが決定しました。
raspberry pi の使用を勧め、決定しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passport02]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/09/passport/"/>
    <updated>2015-10-09T00:16:10+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/09/passport</id>
    <content type="html"><![CDATA[<h1>SWOT分析</h1>

<p>(Strengths,Weaknesses,Opportunities,Threats)<br/>
Wikiより<br/>
<code>
目標を達成するために意思決定を必要としている組織や個人のプロジェクトやベンチャービジネスなどにおいて、外部環境や内部環境を強み、弱み、機会、脅威の4つのカテゴリーで要因分析し、事業環境変化に対応した経営資源の最適活用を図る経営戦略策定法の一つである。
</code></p>

<h1>ベンチマーキング</h1>

<p>Wikiより
<code>
製品、サービス、プロセス、慣行(以前からのならわしとして通常行われること)を継続的に測定し、パフォーマンスの良い競合会社やその他の優良企業のパフォーマンスを定性的、定量的に比較すること
</code></p>

<h1>プロダクト・ポートフォリオマネジメント(PPM)</h1>

<p>Wikiより<br/>
<code>
経営資源を最適に配分することを目的として、製品ライフサイクルと製品製造現場における経営曲線効果の概念を元にした経営理論。市場成長率、市場占有率の行程によって分析を行う。
</code></p>

<h2>金のなる木</h2>

<p>市場成長率が低く、市場占有率が高い。追加的な投資があまり必要ではない。そのため、資金流入、利益が見込める分野で、成熟期ー衰退期に属する。</p>

<h2>花型製品</h2>

<p>市場成長率が高く、占有率も高い。つまり、資金流入も大きいが占有率の維持、拡大に多額の追加投資を必要とする。製品ライフサイクルにおける導入期ー成長期となる。</p>

<h2>問題児</h2>

<p>市場成長率が高く、市場占有率は低い。成長率が高い反面、占有率が低い分野。花型製品となるのか、負け犬製品となるのかが別れる時期で、製品ライフサイクルにおける導入期ー成長期になる.</p>

<h2>負け犬</h2>

<p>市場成長率が低く、市場占有率も低い。撤退が検討される分野で、製品ライフスタイルにおける成熟期ー衰退期における。</p>

<h2>ポートフォリオ(Portfolio)</h2>

<p>集められた資料や情報そのもの全体を意味する場合もある。</p>

<h2>プロダクト・ポートフォリオの目的</h2>

<p>目的はあくまで、資金の配分をどうするか、撤退をするのか促進をするのかを判断することである。</p>

<h1>MOT(Management of Technology)</h1>

<p>Wikiより
<code>
日本語では、技術経営という言葉で扱う。イノベーションの創出をマネジメントし、新しい技術を取り入れながら事業を行う企業・組織が、持続的発展のために、技術を含めて総合的に経営管理を行い、経済的価値を生み出していくための戦略を立案、決定、実行することが目的である。
</code></p>

<h1>プロダクトライフサイクル</h1>

<p>Wikiより<br/>
<code>
製品が市場に投入されてから、次第に売れなくなり姿を消すまでのプロセスのことをいう。市場における製品寿命を示すものである。  
1. 導入期  
2. 成長期  
3. 成熟期  
4. 衰退期
</code></p>

<h1>コアコンピタンス経営(core competence)</h1>

<p>Wikiより
<code>
他社には真似のできない、企業独自のノウハウや技術などの強みを核とした経営を行うことを指す。
</code></p>

<h1>M&amp;A(mergers and acquisitions)合併と買収</h1>

<p>Wikiより
<code>
他の企業を取得しようとする際には買収者やその子会社などに吸収合併させるほか、買収先企業の株式を買収して子会社化する手段が用いられることから、およそ企業の取得という効果に着目して合併と買収を総称するものである。
</code>
<a href="http://u-note.me/note/47486302">M&amp;Aの利点と欠点について、説明しているページ</a></p>

<h1>情報戦略</h1>

<p><code>
企業全体の情報資源をどのように活用していくかを具体化した、中ー長期に渡る戦略である。情報戦略とは、経営戦略によって策定される戦略の一つ。
</code></p>

<h1>コーポレートアイデンティティ(CI)</h1>

<p>企業文化を構築し、特性や独自性を統一されたイメージやデザインやメッセージで発信し、、社会と共有することで存在価値を高めていく企業戦略の一つ。</p>

<h1>ニッチ市場について</h1>

<p>市場全体の一部を構成する特定のニーズを持つ規模の小さい市場のこと。隙間市場ともいい、市場の発見はニッチを開拓するなどという使用方法をする</p>

<h1><a href="http://www.itl-net.com/bsc/bsc7.html">重要成功分析(CSF:Critical Success Factor)</a></h1>

<p>重要成功要因の洗い出し手順<br/>
1. 戦略目標を達成するための要因をできる限り多く洗い出す<br/>
2. 洗いだした要因の中から、最も重要なものを選択する<br/>
3. 2.で選択した要因が戦略目標を実現するために因果関係があるかどうかを熟考し、重要成功要因として決定する</p>

<p>全社的なレベルまでまとめられた後に、個人レベルまでブレークダウンされ、具体化される。</p>

<h1>AIDMA(アイドマ)の法則</h1>

<ol>
<li>Attention(注意)</li>
<li>Interest(関心)</li>
<li>Desire(要求)</li>
<li>Memory(記憶)</li>
<li>Action(行動)</li>
</ol>


<h1>マーケティングミックス</h1>

<p><a href="http://viral-community.com/starting-side-business/marketing-mix-4p-4c-4731/">マーケティングミックスの良説</a></p>

<h1>マーケットイン</h1>

<p>コトバンクより
<code>
商品の企画開発や生産において、消費者のニーズを重視する方法。製品ありきではなく、顧客ありきの販売戦略。
</code></p>

<h1>CRM</h1>

<p>(Customer Relationship Management)</p>

<h1>ANSI</h1>

<p>(American National Standards Institute)</p>

<h1>ISO</h1>

<p>(International Organization for Standardization)</p>

<h1>IEEE(アイ・トリプルイー)</h1>

<p>(The Institute of Electrical and Electronics Engineers)</p>

<h1>JIS</h1>

<p>(Japanese Industrial Standards)</p>

<h1>SET</h1>

<p>(Secure Electronic Transaction)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新しい有志のためのガイダンス]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/08/resume/"/>
    <updated>2015-10-08T00:25:40+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/08/resume</id>
    <content type="html"><![CDATA[<p>今回はマークダウンの導入もありますので、マークダウンで記述してみました。
<img src="https://cir-kit.github.io/images/2015-04-04-logo/CIR-KIT_square3.png" alt="" /></p>

<h2>0.目次</h2>

<h5>いろんな紹介</h5>

<p>1.マークダウンの導入<br/>
2.CIR-KITの先輩方の紹介<br/>
3.Wolfram alfaの紹介<br/>
4.gitの紹介、git-flowの紹介、github-flowの紹介<br/>
5.自己紹介</p>

<hr />

<h5>こっから本題</h5>

<p>6.今の1号機を動かすには<br/>
7.arduino<->pcの通信方法解説<br/>
8.Cの必要性<br/>
9.1号機の（動いていた頃の）回路<br/>
10.お願い<br/>
11.依頼</p>

<h2>1.マークダウンの導入</h2>

<h3>マークダウンとは..?</h3>

<p>Markdown（マークダウン）は、文書を記述するための軽量マークアップ言語のひとつである。 もとはプレーンテキスト形式で手軽に書いた文書からHTMLを生成するために開発された。</p>

<p>つまり、手軽にメモ感覚で記述できる、かつwebページにそのままアップできるという、なんとも素晴らしい言語ですが、少し単調になってしまうというか、デザインを変え難いところああります。</p>

<p>CIR-KITのブログもこれを採用して一時期作成しました。</p>

<h3>haroopadをインストールしましょう</h3>

<p>下のやり方は、<strong>ubuntu14.04LTS</strong>での環境で確認しました。<br/>
<a href="http://linuxg.net/how-to-install-haroopad-0-12-2-on-ubuntu-debian-and-derivative-systems/">インストール方法</a></p>

<p>下のやり方は、<strong>ubuntu15.04</strong>での環境で確認しました。
1.Ubuntu Software centerで、haroopadと検索<br/>
2.install!<br/>
<img src="http://icons.iconarchive.com/icons/alecive/flatwoken/512/Apps-Haroopad-icon.png" alt="" /></p>

<h3>ちょっと練習</h3>

<p>今日の目次をマークダウンで記述してみましょう
どうぞ</p>

<hr />

<hr />

<h2>2.CIR-KITの先輩方の紹介</h2>

<ul>
<li><a href="http://github.com/AriYu">有田先輩</a></li>
<li><a href="http://github.com/RyodoTanaka">田中先輩</a></li>
<li><a href="http://github.com/MatsunoTakuya">松尾先輩</a></li>
<li><a href="http://github.com/Ry0">株丹先輩</a></li>
<li><a href="http://github.com/Ayuge-san">鮎川先輩</a></li>
<li>川島先輩</li>
</ul>


<hr />

<ul>
<li>私こと<a href="http://github.com/YusakuSakamoto">坂本</a></li>
<li><a href="https://github.com/shimoe">下松八重</a></li>
<li><a href="https://github.com/YamaCIR-KIT">山崎</a></li>
<li><a href="https://github.com/Dsaikoro">中野</a></li>
<li><a href="https://github.com/forno">土井</a></li>
</ul>


<h2>3.<a href="http://www.wolframalpha.com/">Wolfram alfa</a>の紹介</h2>

<p>1年生は、解析学という授業や、様々な数学の授業がありますが、答えの載っていないような問題もあると思います。また、あれこれ教科書間違ってんじゃね?みたいな人もいると思いますが、答えをコンピュータに計算してもらいましょう、というのがこの<a href="http://www.wolframalpha.com/">Wolfram alfa</a>です。<a href="http://www.wolframalpha.com/">Wolfram alfa</a>と呼びます。</p>

<p>エクセルと同じような計算ができますが、積分、微分、偏微分など、様々できますので、ぜひご利用ください.
<img src="https://www.wolframalpha.com/images/press/photos/logos/wa-logo-stacked1-large.jpg" alt="" /></p>

<h2>4.gitの紹介、git-flowの紹介、github-flowの紹介</h2>

<p>gitって、&hellip;正直めんどくさいなぁなんて思っていませんか?</p>

<p>しかし、世界では非常に良いと認められていて、しっかりした本もたくさん出版されています。githubを使えば、共同開発もかなりスムーズにできます。ブログもマークダウンで記述するだけで書けるので、無料のサーバーとしても優秀です。</p>

<p>これは最近私達の活動に取り入れたことなのですが、正直使いにくいgitを使いやすくしてくれるツールが、<strong>git-flow</strong>と、<strong>github-flow</strong>です。これは私が説明するよりもウェブサイトを見てほしいと思います。</p>

<p>私がこの<strong>git-flow</strong>を使用した結果をお見せします。　
どうぞ
<a href="https://github.com/YusakuSakamoto/YusakuSakamoto.octopress/blob/master/source/images" title="">gitkのスクショ</a></p>

<h2>5.自己紹介</h2>

<p>これを機会に、今までの活動を振り返りたいと思います。<br/>
<strong>1年</strong><br/>
4月 部活動見学<br/>
5月 CIR-KIT入部<br/>
6月 C言語本を読み始める<br/>
7月 なんとなく期末の試験勉強を始める<br/>
8月 夏休みなので、すぐに実家に帰還<br/>
9月 免許取得、C言語習得<br/>
10月 Arduinoとの出会い<br/>
11月 つくばチャレンジに初めて見に行く<br/>
12月 なんか忙しかった<br/>
1月 pthreadの学習<br/>
2月 期末試験<br/>
3月 Cを手にとって見る、活動紹介動画作成</p>

<hr />

<p><strong>2年</strong><br/>
4月 部活動紹介<br/>
5月 OpenCVの勉強をはじめる<br/>
6月 C習得、プログラミング講習会を担当する<br/>
7月 なんとなく期末の試験勉強を始める<br/>
8月 人物認識ができていない！やばい！！<br/>
9月 なんか出来たけど、遅いし精度が悪い&hellip;<br/>
10月 高速化の勉強にあきくれる<br/>
11月 つくばチャレンジに出場<br/>
12月 なんか忙しかった<br/>
1月 git,ROSの勉強<br/>
2月 期末試験<br/>
3月 git,ROSの勉強、習得、予算申請の準備</p>

<hr />

<p><strong>3年</strong><br/>
4月 部活動紹介<br/>
5月 3次元陽動機構の設計をはじめる<br/>
6月 期待の6月<br/>
7月 落胆の7月<br/>
8月 虚無<br/>
9月 なんかArcとして活動しろとか言われる<br/>
10月 今ここ<br/>
11月 <br/>
12月 <br/>
1月 <br/>
2月 <br/>
3月</p>

<hr />

<ul>
<li>好きなもの　肉 魚 麺 果物</li>
<li>音楽　サカナクション、amazarashi</li>
<li>graphic 東京グール
<img src="http://livedoor.blogimg.jp/comic_revolution/imgs/2/1/21d63925.jpg" alt="" /></li>
<li>趣味　探しにCIR-KITに来ました</li>
<li>割と自分で何でもやってみないと納得しない人です。基本引きこもりです
<img src="http://music.emtg.jp/datas/mst/keyVisual/75/185_special_key_sakanaction%281%29.jpg" alt="" /></li>
</ul>


<p>CIR-KITで学んだもの
- Ubuntu<br/>
- C<br/>
- C++<br/>
- Makefile<br/>
- cmake<br/>
- LRF<br/>
- Serial 通信<br/>
- emacs<br/>
- ROS<br/>
- OpenCV<br/>
- pthread<br/>
- linux system call<br/>
- GTK Window Programing<br/>
- エンコーダの読み方、仕組み<br/>
- Arduino<br/>
- raspberry Pi<br/>
- imcs01<br/>
- OpenMP<br/>
- パターン認識<br/>
- ライントレース<br/>
- ファジー制御<br/>
- git<br/>
- github<br/>
- git-flow<br/>
- github-flow<br/>
- 機械学習<br/>
- 平均値シフト法<br/>
- 確率<br/>
- マネジメント<br/>
- パーティクルフィルタ<br/>
- カルマンフィルタ<br/>
- ガウシアンフィルタ等の画像処理系フィルタ<br/>
- マルコフ連鎖モンテカルロ法<br/>
- TCP/IP・パケット通信<br/>
- ステッピングモータ制御<br/>
- モータ制御<br/>
- 電気回路基礎<br/>
- PID制御<br/>
- CAD(inventor,Design Spark)<br/>
- その他知識、一般教養</p>

<h2>6.今の1号機を動かすには(一緒に考えよう)</h2>

<h3>電気回路を理解する</h3>

<h3>機構を理解する</h3>

<h3>到達目標を決める</h3>

<h3>役割を決める</h3>

<h3>フローチャートを書く</h3>

<h3>必要な技術力を抽出し、学習する</h3>

<p><img src="http://www.daiichibld.com/kanrico/meetingroom/pic_c001.jpg" alt="" /></p>

<hr />

<h2>7.Arduino<->pcの通信方法解説</h2>

<p>話の量(質もね)が重いので、別の資料(tex)にまとめます。</p>

<h2>8.C++の必要性</h2>

<p>C++を是非学習して欲しい、というのが希望です。</p>

<p>理由は、C++で研究やプログラムを書いている研究室や人が相当少ないので、サンプルが少ないです。また、githubでもCよりはC++のほうが圧倒的に多いです。</p>

<p>次にpython,Javaくらいだと思います。</p>

<p>文法的な違いはあまりありませんというか、たくさんありますというか&hellip;
ただ、C++が理解できればあとは怖いものなしなので、ぜひ学習してください。
try-catch,stack,string,containor,boost,vector,newなどなど、様々なものが利用可能になります。便利です。</p>

<p>C++で書けるものの紹介<br/>
- OpenCV<br/>
- ROS<br/>
- Open Dynamics Engine</p>

<p>例を見せます。<br/>
どうぞ。
<img src="http://www.atmel.com/ja/jp/Images/compiler.jpg" alt="" /></p>

<h2>9.1号機の（動いていた頃の）回路</h2>

<p>今はArduinoとの電気回路が悲惨なことになっていますが、FETを使っていました。
PS3コントローラーを使っていました。ROSは使っていません。まずは電気回路をどうにかして作りましょう。</p>

<p><strong>FET</strong>とは&hellip;?
スイッチングなどに利用されている、増幅トランジスタ、詳しいことは自分で調べてください
秋月で購入しましょう。</p>

<h2>10.お願い</h2>

<p>好きなこと、やりたいことを自分で進んでやってくれるのが一番いいと思います。自分から行動して、面白いことを追求していきましょう.</p>

<h2>11.依頼</h2>

<p>Arcのユーザーインターフェースを一緒に作りませんか?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-10-7-first_post]]></title>
    <link href="http://yusakusakamoto.github.io/blog/2015/10/07/first-post/"/>
    <updated>2015-10-07T15:45:08+09:00</updated>
    <id>http://yusakusakamoto.github.io/blog/2015/10/07/first-post</id>
    <content type="html"><![CDATA[<p>first post</p>
]]></content>
  </entry>
  
</feed>
